{"ast":null,"code":"var _jsxFileName = \"/Users/williamstansbury/Desktop/CS185/test-app/src/Components/AddMovie.js\";\nimport React, { Component } from 'react';\nimport ScrollUpButton from \"react-scroll-up-button\";\nimport { SRLWrapper } from 'simple-react-lightbox';\nimport ReactDOM from 'react-dom';\nimport config from './config.js';\n\nconst firebase = require('firebase');\n\nconst axios = require('axios');\n\nvar notGonnaWork;\nvar images = [];\nfirebase.initializeApp(config);\nvar ref = firebase.database().ref('movies');\n\nfunction userExistsCallback(userId, exists) {\n  if (exists) {\n    alert('user ' + userId + ' exists!');\n  } else {\n    alert('user ' + userId + ' does not exist!');\n  }\n}\n\nvar USERS_LOCATION = 'https://console.firebase.google.com/u/0/project/hci-db/database/hci-db/data/~2Fmovies';\n\nfunction checkIfUserExists(userId) {\n  // var usersRef = new firebase(USERS_LOCATION);\n  ref.child('movies').orderByChild(\"id\").equalTo(userId).once('value', function (snapshot) {\n    // var exists = (snapshot.val() !== null);\n    if (snapshot.exists()) {\n      const userData = snapshot.val();\n      alert(\"exists!\");\n      console.log(\"exists!\", userData);\n    } else {\n      alert(\"does not exist\");\n    } // alert(exists)\n    // userExistsCallback(userId, exists);\n\n  });\n} // function checkForFirstTime(userId) {\n//   ref.child('movies').child(userId).once('value', function(snapshot) {\n//     var exists = (snapshot.id !== null);\n//     userExistsCallback(userId, exists);\n//   });\n// }\n\n\nexport class AddMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      movies: {},\n      shouldUpdate: false,\n      MovieValue: \"\"\n    };\n    this.handleChangeMovieID = this.handleChangeMovieID.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    console.log(ref);\n    ref.on('value', snapshot => {\n      const movies = snapshot.val();\n      console.log(Object.values(movies)); // console.log(Object.values)\n\n      this.setState({\n        movies: Object.values(movies)\n      });\n      notGonnaWork = this.state;\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    console.log(\"update?\"); //only call set state here if it is wrapped in a condition\n    //if you initialize this.state.shouldUpdate and have not changed it yet then this will not run\n    //filp shouldUpdate in the onclick function\n    //react form / submit button\n\n    if (this.state.shouldUpdate !== prevState.shouldUpdate) {\n      let ref = firebase.database().ref('movies');\n      ref.on('value', snapshot => {\n        const data = snapshot.val();\n        this.setState({\n          movies: Object.values(data)\n        });\n      });\n    }\n  }\n\n  handleChangeMovieID(event) {\n    this.setState({\n      movieValue: event.target.value\n    });\n  }\n\n  handleInputChange(event) {\n    const target = event.target;\n    const value = target.checked;\n    const name = target.name;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  handleSubmit(event) {\n    // checkIfUserExists(this.state.movieValue)\n    // checkForFirstTime(this.state.movieValue);\n    // ref.child('movies').child(userId).once('value', function(snapshot) {\n    //     var exists = (snapshot.val() !== null);\n    //     userFirstTimeCallback(userId, exists);\n    //   });\n    //  \tvar jsonBody = {\n    //  \t\t\"id\": this.state.movieValue\n    // }\n    // var id = this.state.movieValue\n    // firebase.database().ref('movies').push().set(jsonBody)\n    axios.get(\"https://www.omdbapi.com/?apikey=71e07b98&i=\" + element).then(function (response) {\n      console.log(response);\n      var img = new Image();\n      var url = response.data.Poster;\n      img.src = url;\n      images.push(img);\n      console.log(url); // codeBlock = codeBlock + '<div class=\"container\"><img src =' + url + ' class = \"image\"/><div class = \"middle\"><div class=\"text\"></div></div></div>'\n    });\n    firebase.database().ref('movies').child(this.state.movieValue).set(\"blank\");\n    alert('Movie Submitted!');\n    event.preventDefault();\n    this.setState({\n      shouldUpdate: !this.state.shouldUpdate\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(ScrollUpButton, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"header\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 6\n      }\n    }, \"AddMovie\")), /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 6\n      }\n    }, \"Movie ID:\", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      value: this.state.value,\n      onChange: this.handleChangeMovieID,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 14\n      }\n    })), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 10\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 10\n      }\n    }, console.log(Object.values(this.state.movies)), Object.values(this.state.movies).map((s, index) => /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }\n    }, s.id)))));\n  }\n\n}\nexport default AddMovie;","map":{"version":3,"sources":["/Users/williamstansbury/Desktop/CS185/test-app/src/Components/AddMovie.js"],"names":["React","Component","ScrollUpButton","SRLWrapper","ReactDOM","config","firebase","require","axios","notGonnaWork","images","initializeApp","ref","database","userExistsCallback","userId","exists","alert","USERS_LOCATION","checkIfUserExists","child","orderByChild","equalTo","once","snapshot","userData","val","console","log","AddMovie","constructor","props","state","movies","shouldUpdate","MovieValue","handleChangeMovieID","bind","handleSubmit","componentDidMount","on","Object","values","setState","componentDidUpdate","prevProps","prevState","data","event","movieValue","target","value","handleInputChange","checked","name","get","element","then","response","img","Image","url","Poster","src","push","set","preventDefault","render","map","s","index","id"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ScrollUpButton from \"react-scroll-up-button\";\nimport { SRLWrapper } from 'simple-react-lightbox';\nimport ReactDOM from 'react-dom'\nimport config from './config.js'\nconst firebase = require('firebase');\nconst axios = require('axios');\n\nvar notGonnaWork;\n\nvar images = [];\n\nfirebase.initializeApp(config)\nvar ref = firebase.database().ref('movies')\n\nfunction userExistsCallback(userId, exists) {\n  if (exists) {\n    alert('user ' + userId + ' exists!');\n  } else {\n    alert('user ' + userId + ' does not exist!');\n  }\n}\n\nvar USERS_LOCATION = 'https://console.firebase.google.com/u/0/project/hci-db/database/hci-db/data/~2Fmovies'\n\nfunction checkIfUserExists(userId) {\n  // var usersRef = new firebase(USERS_LOCATION);\n  ref.child('movies').orderByChild(\"id\").equalTo(userId).once('value', function(snapshot) {\n    // var exists = (snapshot.val() !== null);\n    if (snapshot.exists()){\n      const userData = snapshot.val();\n      alert(\"exists!\")\n      console.log(\"exists!\", userData);\n    } else {\n    \talert(\"does not exist\")\n    }\n    // alert(exists)\n    // userExistsCallback(userId, exists);\n  });\n}\n\n\n// function checkForFirstTime(userId) {\n//   ref.child('movies').child(userId).once('value', function(snapshot) {\n//     var exists = (snapshot.id !== null);\n//     userExistsCallback(userId, exists);\n//   });\n// }\n\n\nexport class AddMovie extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {movies: {},\n\t\t\tshouldUpdate: false,\n\t\t\tMovieValue: \"\"\n\t\t}\n\t\tthis.handleChangeMovieID = this.handleChangeMovieID.bind(this);\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\n\t}\n\n\tcomponentDidMount(){\n\t\t\n\t\tconsole.log(ref)\n\t\tref.on('value', snapshot => {\n\t\t\tconst movies = snapshot.val()\n\t\t\tconsole.log(Object.values(movies))\n\n\t\t\t// console.log(Object.values)\n\t\t\tthis.setState({movies: Object.values(movies)})\n\t\t\tnotGonnaWork = this.state\n\t\t})\n\t}\n\n\tcomponentDidUpdate(prevProps, prevState, snapshot){\n\t\tconsole.log(\"update?\")\n\t\t\n\t\t//only call set state here if it is wrapped in a condition\n\t\t//if you initialize this.state.shouldUpdate and have not changed it yet then this will not run\n\n\t\t//filp shouldUpdate in the onclick function\n\n\t\t//react form / submit button\n\t\tif(this.state.shouldUpdate !== prevState.shouldUpdate){\n\t\tlet ref = firebase.database().ref('movies')\n\t\tref.on('value', snapshot => {\n\t\t\tconst data = snapshot.val()\n\t\t\tthis.setState({movies: Object.values(data)})\n\t\t})\n\n\t\t}\n\t}\n\n\thandleChangeMovieID(event) {\n\t    this.setState({movieValue: event.target.value});\n\t}\n\n\thandleInputChange(event) {\n    const target = event.target;\n    const value = target.checked;\n    const name = target.name;\n\n    this.setState({\n      [name]: value\n    });\n  }\n\n\thandleSubmit(event) {\n\n\t\t// checkIfUserExists(this.state.movieValue)\n\n\t\t// checkForFirstTime(this.state.movieValue);\n\n\t\t// ref.child('movies').child(userId).once('value', function(snapshot) {\n\t\t//     var exists = (snapshot.val() !== null);\n\t\t//     userFirstTimeCallback(userId, exists);\n\t\t//   });\n\t //  \tvar jsonBody = {\n\t //  \t\t\"id\": this.state.movieValue\n\t\t// }\n\n\t\t// var id = this.state.movieValue\n\t  \t\t\n\t\t// firebase.database().ref('movies').push().set(jsonBody)\n\t\taxios.get(\"https://www.omdbapi.com/?apikey=71e07b98&i=\" + element).then(function(response) {\n\t\tconsole.log(response);\n\t\tvar img = new Image();\n\t\tvar url = response.data.Poster;\n\t\timg.src = url;\n\t\timages.push(img)\n\t\tconsole.log(url);\n\n\t\t// codeBlock = codeBlock + '<div class=\"container\"><img src =' + url + ' class = \"image\"/><div class = \"middle\"><div class=\"text\"></div></div></div>'\n\n\t})\n\n\t\tfirebase.database().ref('movies').child(this.state.movieValue).set(\"blank\")\n\n\t\talert('Movie Submitted!');\n\t\t   \n\t  \tevent.preventDefault();\n\t  \tthis.setState({shouldUpdate: !this.state.shouldUpdate})\n\t  }\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<ScrollUpButton />\n\t\t\t\t<header>\n\t\t\t\t\t<h1>AddMovie</h1>\n\t\t\t\t</header>\n\t\t\t\t<form onSubmit={this.handleSubmit}>\n\t\t\t\t\t\n\t\t\t\t\t<label>\n\t\t\t\t\t\tMovie ID:\n\t\t\t\t\t\t\n\t\t\t\t\t        <input type=\"text\" value={this.state.value} onChange={this.handleChangeMovieID} />\n\t\t\t\t\t    </label>\n\t\t\t\t\t    <input type=\"submit\" value=\"Submit\" />\n\t\t\t\t\t    <div>\n\t\t\t\t\t    {\n\t\t\t\t\t\t\tconsole.log(Object.values(this.state.movies))\n\t\t\t\t\t\t}\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tObject.values(this.state.movies).map((s,index) => (\n\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t\t\t{s.id}\n\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t}\n\t\t\t\t\t    </div>\n\t\t\t\t\t\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default AddMovie;"]},"metadata":{},"sourceType":"module"}
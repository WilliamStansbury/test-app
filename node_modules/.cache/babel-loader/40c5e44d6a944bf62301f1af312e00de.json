{"ast":null,"code":"var _jsxFileName = \"/Users/williamstansbury/Desktop/CS185/test-app/src/Components/Messages.js\";\nimport React, { Component, useEffect, useState } from 'react';\nimport londoneye from '../Images/londoneye.JPG';\nimport ScrollUpButton from \"react-scroll-up-button\";\nimport config from './config.js';\n\nconst firebase = require('firebase');\n\nfunction MessagesApp() {\n  const [data, setData] = useState([]);\n  const [shouldRender, setShouldRender] = useState(true);\n  useEffect(() => {\n    if (!firebase.apps.length) {\n      firebase.initializeApp(config);\n    } //get a reference to the database\n\n\n    let ref = firebase.database().ref('data'); //retrieve its data\n\n    ref.on('value', snapshot => {\n      //this is your call back function\n      //state will be a JSON object after this\n      //set your apps state to contain this data however you like\n      const state = snapshot.val(); //since i use react 16, i set my state like this\n      //i have previously declared a state variable like this: const [data, setData] = useState([]) so that I can make the below call\n\n      setShouldRender(!shouldRender);\n      setData(state);\n    });\n  }, [shouldRender]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 4\n    }\n  }, \" \", data, \" \"));\n}\n\nexport class Messages extends Component {\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(ScrollUpButton, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 5\n      }\n    }, \"Messages\"));\n  }\n\n}\nexport default MessagesApp;","map":{"version":3,"sources":["/Users/williamstansbury/Desktop/CS185/test-app/src/Components/Messages.js"],"names":["React","Component","useEffect","useState","londoneye","ScrollUpButton","config","firebase","require","MessagesApp","data","setData","shouldRender","setShouldRender","apps","length","initializeApp","ref","database","on","snapshot","state","val","Messages","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,SAA3B,EAAsCC,QAAtC,QAAsD,OAAtD;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,cAAP,MAA2B,wBAA3B;AACA,OAAOC,MAAP,MAAmB,aAAnB;;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AAEA,SAASC,WAAT,GAAuB;AACtB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACS,YAAD,EAAeC,eAAf,IAAkCV,QAAQ,CAAC,IAAD,CAAhD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACf,QAAI,CAACK,QAAQ,CAACO,IAAT,CAAcC,MAAnB,EAA2B;AACxBR,MAAAA,QAAQ,CAACS,aAAT,CAAuBV,MAAvB;AACF,KAHc,CAKf;;;AACA,QAAIW,GAAG,GAAGV,QAAQ,CAACW,QAAT,GAAoBD,GAApB,CAAwB,MAAxB,CAAV,CANe,CAQf;;AACAA,IAAAA,GAAG,CAACE,EAAJ,CAAO,OAAP,EAAgBC,QAAQ,IAAI;AAC3B;AACA;AACA;AACA,YAAMC,KAAK,GAAGD,QAAQ,CAACE,GAAT,EAAd,CAJ2B,CAK1B;AACD;;AACAT,MAAAA,eAAe,CAAC,CAACD,YAAF,CAAf;AACAD,MAAAA,OAAO,CAACU,KAAD,CAAP;AACA,KATD;AAUA,GAnBQ,EAmBN,CAACT,YAAD,CAnBM,CAAT;AAoBA,sBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAKF,IAAL,MADD,CADD;AAIA;;AAED,OAAO,MAAMa,QAAN,SAAuBtB,SAAvB,CAAiC;AACvCuB,EAAAA,MAAM,GAAG;AACR,wBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,eAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFD,CADD;AAMA;;AARsC;AAUxC,eAAef,WAAf","sourcesContent":["import React, { Component, useEffect, useState } from 'react';\nimport londoneye from '../Images/londoneye.JPG';\nimport ScrollUpButton from \"react-scroll-up-button\";\nimport config from './config.js'\nconst firebase = require('firebase');\n\nfunction MessagesApp() {\n\tconst [data, setData] = useState([])\n\tconst [shouldRender, setShouldRender] = useState(true)\n\n\tuseEffect(() => {\n\t\tif (!firebase.apps.length) {\n\t\t   firebase.initializeApp(config)\n\t\t} \n\n\t\t//get a reference to the database\n\t\tlet ref = firebase.database().ref('data')\n\n\t\t//retrieve its data\n\t\tref.on('value', snapshot => {\n\t\t\t//this is your call back function\n\t\t\t//state will be a JSON object after this\n\t\t\t//set your apps state to contain this data however you like\n\t\t\tconst state = snapshot.val()\n\t\t \t//since i use react 16, i set my state like this\n\t\t\t//i have previously declared a state variable like this: const [data, setData] = useState([]) so that I can make the below call\n\t\t\tsetShouldRender(!shouldRender)\n\t\t\tsetData(state)\n\t\t})\n\t}, [shouldRender])\n\treturn (\n\t\t<div>\n\t\t\t<p> {data} </p>\n\t\t</div>);\n}\n\nexport class Messages extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<ScrollUpButton />\n\t\t\t\t<h1>Messages</h1>\n\t\t\t</div>\n\t\t\t);\n\t}\n}\nexport default MessagesApp;"]},"metadata":{},"sourceType":"module"}